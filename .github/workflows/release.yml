name: Release

on:
  push:
    branches: ["main"]

jobs:
  preconditions:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check token
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}"]; then
            echo "Must provide a GITHUB_TOKEN secret in order to run release workflow"
            exit 1
          fi
      - name: Get repository identifiers
        id: repo_ids
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          ORG_NAME=$(echo "${{ github.event.repository.owner.name }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "ORG_NAME=$ORG_NAME" >> $GITHUB_OUTPUT

  integration-test:
    runs-on: ubuntu-20.04
    name: Integration Tests
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    steps:
      - name: Checkout veritable-cloudagent
        uses: actions/checkout@v2
      - name: Setup Libindy
        uses: ./.github/actions/setup-libindy
      - name: Setup Indy Pool
        uses: ./.github/actions/setup-indy-pool
        with:
          seed: ${TEST_AGENT_PUBLIC_DID_SEED}
      - name: Setup NodeJS
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Run tests for Rest
        run: TEST_AGENT_PUBLIC_DID_SEED=${TEST_AGENT_PUBLIC_DID_SEED} GENESIS_TXN_PATH=${GENESIS_TXN_PATH} yarn test rest --coverage

  check-version:
    name: "Check version"
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}
    steps:
      - uses: actions/checkout@v3
      - run: git fetch --depth=1 --tags origin
      - name: Install yq
        run: sudo snap install yq
      - name: Check Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Skipping release as version has not increased
        if: steps.get_version.outputs.IS_NEW_VERSION != 'true'
        shell: bash
        run: |
          echo "Skipping release as current version has already been published"

  # publish:
  #   name: "Publish package"
  #   needs: [preconditions, integration-test, check-version]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup QEMU
  #       uses: docker/setup-qemu-action@v2
  #       with:
  #         platforms: all
  #     - name: Setup Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         buildkitd-flags: "--debug"
  #     - name: Generate tags
  #       id: generate-tags
  #       env:
  #         VERSION: ${{ needs.check-version.outputs.version }}
  #         IS_NEW_VERSION: ${{ needs.check-version.outputs.is_new_version }}
  #         IS_PRERELEASE: ${{ needs.check-version.outputs.is_prerelease }}
  #       # if it's a new non prerelease version tag with hash, version latest-dev and latest
  #       # if it's a new prerelease version tag with hash, version and latest-dev
  #       # if it's a non new version tag with hash and latest-dev
  #       run: |
  #         if [ "$IS_NEW_VERSION" == "true" ]; then
  #           echo "GHCR_VERSION_TAG=ghcr.io/${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:$VERSION" >> $GITHUB_OUTPUT
  #           echo "DOCKERHUB_VERSION_TAG=${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:$VERSION" >> $GITHUB_OUTPUT
  #           if [ "$IS_PRERELEASE" == "false" ]; then
  #             echo "GHCR_LATEST_TAG=ghcr.io/${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:latest" >> $GITHUB_OUTPUT
  #             echo "DOCKERHUB_LATEST_TAG=${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:latest" >> $GITHUB_OUTPUT
  #           else
  #             echo "GHCR_LATEST_TAG=" >> $GITHUB_OUTPUT
  #             echo "DOCKERHUB_LATEST_TAG=" >> $GITHUB_OUTPUT
  #           fi;
  #         else
  #           echo "GHCR_VERSION_TAG=" >> $GITHUB_OUTPUT
  #           echo "GHCR_LATEST_TAG=" >> $GITHUB_OUTPUT
  #           echo "DOCKERHUB_VERSION_TAG=" >> $GITHUB_OUTPUT
  #           echo "DOCKERHUB_LATEST_TAG=" >> $GITHUB_OUTPUT
  #         fi;
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # - name: Login to Dockerhub Registry
  #     #   uses: docker/login-action@v2
  #     #   with:
  #     #     username: ${{ secrets.DSCP_DOCKERHUB_USERNAME }}
  #     #     password: ${{ secrets.DSCP_DOCKERHUB_TOKEN }}
  #     # - name: Build image
  #     #   uses: docker/build-push-action@v4
  #     #   with:
  #     #     builder: ${{ steps.buildx.outputs.name }}
  #     #     context: .
  #     #     file: ./Dockerfile
  #     #     platforms: linux/amd64, linux/arm64
  #     #     push: true
  #     #     tags: |
  #     #       ghcr.io/${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:${{ github.sha }}
  #     #       ${{ steps.generate-tags.outputs.GHCR_VERSION_TAG }}
  #     #       ${{ steps.generate-tags.outputs.GHCR_LATEST_TAG }}
  #     #       ${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:${{ github.sha }}
  #     #       ${{ steps.generate-tags.outputs.DOCKERHUB_VERSION_TAG }}
  #     #       ${{ steps.generate-tags.outputs.DOCKERHUB_LATEST_TAG }}
  #     #     labels: |
  #     #       org.opencontainers.image.title=${{ needs.preconditions.outputs.repo_name }}
  #     #       org.opencontainers.image.description=${{ github.event.repository.description }}
  #     #       org.opencontainers.image.source=${{ github.event.repository.html_url }}
  #     #       org.opencontainers.image.url=${{ github.event.repository.html_url }}
  #     #       org.opencontainers.image.revision=${{ github.sha }}
  #     #       org.opencontainers.image.version=${{ needs.check-version.outputs.version }}
  #     #       org.opencontainers.image.created=${{ needs.check-version.outputs.build_date }}

  #     - name: Build release version
  #       uses: "marvinpinto/action-automatic-releases@latest"
  #       with:
  #         repo_token: "${{ secrets.GITHUB_TOKEN }}"
  #         automatic_release_tag: ${{ needs.check-version.outputs.version }}
  #         prerelease: false
  #         title: Release ${{ needs.check-version.outputs.version }}
  #     - name: Build release latest
  #       uses: "marvinpinto/action-automatic-releases@latest"
  #       with:
  #         repo_token: "${{ secrets.GITHUB_TOKEN }}"
  #         automatic_release_tag: latest
  #         prerelease: false
  #         title: Latest Release ${{ needs.check-version.outputs.version }}
