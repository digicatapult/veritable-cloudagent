name: Lint and Test ( new jobs )

on:
  pull_request:
    branches-ignore: ["main"]
  push:
    branches-ignore: ["main"]

# env:
#   TEST_AGENT_PUBLIC_DID_SEED: 000000000000000000000000Trustee9
#   GENESIS_TXN_PATH: network/genesis/local-genesis.txn

jobs:

  repo_ids:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get repository identifiers
        id: repo_ids
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          ORG_NAME=$(echo "${{ github.event.repository.owner.name }}" | tr '[:upper:]' '[:lower:]')
          echo $REPO_NAME
          echo $ORG_NAME
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "ORG_NAME=$ORG_NAME" >> $GITHUB_OUTPUT

  lint:
    name: Run lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm install # maybe this should be changed to npm ci
      - name: Lint
        run: npm run lint

  dependency-check:
    name: Run dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm install # maybe this should be changed to npm ci
      - name: Dependency Check
        run: ./node_modules/.bin/depcheck --skip-missing=true --ignores=@types/eslint,@types/multer,@types/ref-struct-di,@types/uuid,conventional-changelog-conventionalcommits,eslint-import-resolver-typescript,eslint-plugin-import,tsconfig-paths # need to be replaced with: npm run depcheck

  tests:
    name: Run tests
    strategy:
      matrix:
        test-type: [offchain, onchain, unit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm install # maybe this should be changed to npm ci
      - name: Build the TypeScript OpenAPI, using the tsoa package
        run: npm run build
      - name: Test the matrix test type offchain
        if: matrix.test-type == 'offchain'
        run: echo OFFCHAIN
      - name: Test the matrix test type onchain
        if: matrix.test-type == 'onchain'
        run: echo ONCHAIN
      - name: Test the matrix test type unit
        if: matrix.test-type == 'unit'
        run: echo UNIT
      # - name: Setup dependencies
      #   if: matrix.test-type != 'unit'
      #   run: docker-compose up -d
      # - name: Sleep
      #   if: matrix.test-type != 'unit'
      #   uses: kibertoad/wait-action@1.0.1
      #   with:
      #     time: '30s'
      # - name: Put process flows on-chain
      #   if: matrix.test-type == 'onchain'
      #   run: npm run flows
      # - name: Run database migrations
      #   if: matrix.test-type != 'unit'
      #   run: npm run db:migrate
      #   env:
      #     NODE_ENV: test
      - name: Run tests
        run: npm run test

#   check-version:
#     name: "Check version"
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - run: git fetch --depth=1 --tags origin
#       - name: Install yq
#         run: sudo snap install yq
#       - name: Check Build Version
#         id: get_version
#         run: ./scripts/check-version.sh
#         shell: bash
#       - name: Error if version is not increased
#         shell: bash
#         run: |
#           exit $([[ "${{steps.get_version.outputs.IS_NEW_VERSION}}" = "true" ]] && echo 0 || echo 1)

#   build-docker:
#     name: "Build docker image"
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Setup QEMU
#         uses: docker/setup-qemu-action@v2
#         with:
#           platforms: all
#       - name: Setup Docker Buildx
#         id: buildx
#         uses: docker/setup-buildx-action@v2
#         with:
#           buildkitd-flags: "--debug"
#       - name: Build image
#         uses: docker/build-push-action@v4
#         with:
#           builder: ${{ steps.buildx.outputs.name }}
#           context: .
#           file: ./Dockerfile
#           platforms: linux/amd64, linux/arm64
#           push: false
