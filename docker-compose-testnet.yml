#docker-compose -f docker-compose-testnet.yml up --build -d

##################################################################################
## Docker-Compose for a 3-agent testnet + 3-node private IPFS cluster ############
##
## Agents: Alice, Bob, Charlie
## Ports for testing purposes (HTTP):
##    Alice   = 3000 [ 5002 (HTTP) & 5003 (WS) internal ]
##    Bob     = 3001 [ 5102 (HTTP) & 5103 (WS) internal ]
##    Charlie = 3002 [ 5202 (HTTP) & 5203 (WS) internal ]
##    IPFS    = 8080 [ 5001 used for internal traffic   ]
## Network: testnet
##
##################################################################################

version: '3.8'

services:
  ##################################################################################
  ## Alice #########################################################################
  ##################################################################################

  alice:
    container_name: alice
    image: afj-rest
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      ipfs0:
        condition: service_healthy
    volumes:
      # also possible to set values using json
      - ./samples/cliConfig.json:/config.json
    ports:
      #- '5002:5002' #5000 is used for AirPlay in MacOS
      #- '5003:5003'
      - '3000:3000'
    # or via command line arguments
    command: --endpoint "http://alice:5002" "ws://alice:5003" --ipfs-origin http://ipfs0:5001 --opa-origin http://opa:8181 --config /config.json --persona-title "TA" --persona-color "#eddedf"
    networks:
      - testnet

  ##################################################################################
  ## Bob ###########################################################################
  ##################################################################################

  bob:
    container_name: bob
    image: afj-rest
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      ipfs1:
        condition: service_healthy
    volumes:
      - ./samples/cliConfig.json:/config.json
    ports:
      #- '5102:5002'
      #- '5103:5003'
      - '3001:3000'
    command: --endpoint "http://bob:5002" "ws://bob:5003" --ipfs-origin http://ipfs1:5001 --opa-origin http://opa:8181 --config /config.json --persona-title "OEM" --persona-color "#dfedde"
    networks:
      - testnet

  ##################################################################################
  ## Charlie #######################################################################
  ##################################################################################

  charlie:
    container_name: charlie
    image: afj-rest
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      ipfs2:
        condition: service_healthy
    volumes:
      - ./samples/cliConfig.json:/config.json
    ports:
      #- '5202:5002'
      #- '5203:5003'
      - '3002:3000'
    command: --endpoint "http://charlie:5002" "ws://charlie:5003" --ipfs-origin http://ipfs2:5001 --opa-origin http://opa:8181 --config /config.json --persona-title "Supplier" --persona-color "#dedfed"
    networks:
      - testnet

  ##################################################################################
  ## Cluster PEER 0 ################################################################
  ##################################################################################

  ipfs0:
    container_name: ipfs0
    image: ipfs/kubo:release
    ports:
      #     - "4001:4001" # ipfs swarm - expose if needed/wanted
      #     - "5001:5001" # ipfs api - expose if needed/wanted
      - '8080:8080' # ipfs HTTP gateway
    volumes:
      - ipfs0:/data/ipfs
    networks:
      - testnet

  cluster0:
    container_name: cluster0
    image: ipfs/ipfs-cluster:stable
    depends_on:
      ipfs0:
        condition: service_started
    environment:
      CLUSTER_PEERNAME: cluster0
      CLUSTER_SECRET: b61cc34d619656a7cac49c8d031b20f7c87d81d27354c6001816bddca0355a29
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs0/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: '*' # Trust all peers in Cluster
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094 # Expose API
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery
    #ports:
    # Open API port (allows ipfs-cluster-ctl usage on host)
    # - "9094:9094"
    # The cluster swarm port would need to be exposed if this container
    # was to connect to cluster peers on other hosts.
    # But this is just a testing cluster.
    # - "9095:9095" # Cluster IPFS Proxy endpoint
    # - "9096:9096" # Cluster swarm endpoint
    volumes:
      - cluster0:/data/ipfs-cluster
    networks:
      - testnet

  ##################################################################################
  ## Cluster PEER 1 ################################################################
  ##################################################################################

  ipfs1:
    container_name: ipfs1
    image: ipfs/kubo:release
    volumes:
      - ipfs1:/data/ipfs
    networks:
      - testnet

  cluster1:
    container_name: cluster1
    image: ipfs/ipfs-cluster:stable
    depends_on:
      ipfs1:
        condition: service_started
    environment:
      CLUSTER_PEERNAME: cluster1
      CLUSTER_SECRET: b61cc34d619656a7cac49c8d031b20f7c87d81d27354c6001816bddca0355a29
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs1/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: '*'
      CLUSTER_MONITORPINGINTERVAL: 2s
    volumes:
      - cluster1:/data/ipfs-cluster
    networks:
      - testnet

  ##################################################################################
  ## Cluster PEER 2 ################################################################
  ##################################################################################

  ipfs2:
    container_name: ipfs2
    image: ipfs/kubo:release
    volumes:
      - ipfs2:/data/ipfs
    networks:
      - testnet

  cluster2:
    container_name: cluster2
    image: ipfs/ipfs-cluster:stable
    depends_on:
      ipfs2:
        condition: service_started
    environment:
      CLUSTER_PEERNAME: cluster2
      CLUSTER_SECRET: b61cc34d619656a7cac49c8d031b20f7c87d81d27354c6001816bddca0355a29
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs2/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: '*'
      CLUSTER_MONITORPINGINTERVAL: 2s
    volumes:
      - cluster2:/data/ipfs-cluster
    networks:
      - testnet

  ##################################################################################
  ## OPA ###########################################################################
  ##################################################################################

  opa:
    container_name: opa
    image: openpolicyagent/opa:0.60.0-static
    ports:
      - '8181:8181'
    volumes:
      - ./samples/supplierCustomer.rego:/supplierCustomer.rego
    command: run --server --log-level debug supplierCustomer.rego
    networks:
      - testnet

volumes:
  ipfs0:
  ipfs1:
  ipfs2:
  cluster0:
  cluster1:
  cluster2:

networks:
  testnet:
    name: testnet
    driver: bridge
