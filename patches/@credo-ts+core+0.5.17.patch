diff --git a/node_modules/@credo-ts/core/build/decorators/thread/ThreadDecorator.d.ts b/node_modules/@credo-ts/core/build/decorators/thread/ThreadDecorator.d.ts
index 745f607..e4345c6 100644
--- a/node_modules/@credo-ts/core/build/decorators/thread/ThreadDecorator.d.ts
+++ b/node_modules/@credo-ts/core/build/decorators/thread/ThreadDecorator.d.ts
@@ -1,26 +1,57 @@
+import { Expose } from 'class-transformer'
+import { IsInt, IsOptional, Matches } from 'class-validator'
+
+// ^did:[a-z0-9]+:(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9.-])+  # domain (no ':', allows %XX)
+// (?::(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)*  # extra colon-separated segments
+// (?:\?(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)?  # optional query
+// (?:#(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)?   # optional fragment
+// $
+
+const PthidRegExp =
+  /^([-_./A-Za-z0-9]{8,64}|did:[a-z0-9]+:(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9.-])+(?::(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)*(?:\?(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)?(?:#(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)?)$/
+
 /**
  * Represents `~thread` decorator
  * @see https://github.com/hyperledger/aries-rfcs/blob/master/concepts/0008-message-id-and-threading/README.md
  */
-export declare class ThreadDecorator {
-    constructor(partial?: Partial<ThreadDecorator>);
-    /**
-     * The ID of the message that serves as the thread start.
-     */
-    threadId?: string;
-    /**
-     * An optional parent `thid`. Used when branching or nesting a new interaction off of an existing one.
-     */
-    parentThreadId?: string;
-    /**
-     * A number that tells where this message fits in the sequence of all messages that the current sender has contributed to this thread.
-     */
-    senderOrder?: number;
-    /**
-     * Reports the highest `sender_order` value that the sender has seen from other sender(s) on the thread.
-     * This value is often missing if it is the first message in an interaction, but should be used otherwise, as it provides an implicit ACK.
-     */
-    receivedOrders?: {
-        [key: string]: number;
-    };
+
+export class ThreadDecorator {
+  public constructor(partial?: Partial<ThreadDecorator>) {
+    this.threadId = partial?.threadId
+    this.parentThreadId = partial?.parentThreadId
+    this.senderOrder = partial?.senderOrder
+    this.receivedOrders = partial?.receivedOrders
+  }
+
+  /**
+   * The ID of the message that serves as the thread start.
+   */
+  @Expose({ name: 'thid' })
+  @Matches(PthidRegExp)
+  @IsOptional()
+  public threadId?: string
+
+  /**
+   * An optional parent `thid`. Used when branching or nesting a new interaction off of an existing one.
+   */
+  @Expose({ name: 'pthid' })
+  @Matches(PthidRegExp)
+  @IsOptional()
+  public parentThreadId?: string
+
+  /**
+   * A number that tells where this message fits in the sequence of all messages that the current sender has contributed to this thread.
+   */
+  @Expose({ name: 'sender_order' })
+  @IsOptional()
+  @IsInt()
+  public senderOrder?: number
+
+  /**
+   * Reports the highest `sender_order` value that the sender has seen from other sender(s) on the thread.
+   * This value is often missing if it is the first message in an interaction, but should be used otherwise, as it provides an implicit ACK.
+   */
+  @Expose({ name: 'received_orders' })
+  @IsOptional()
+  public receivedOrders?: { [key: string]: number }
 }
diff --git a/node_modules/@credo-ts/core/build/decorators/thread/ThreadDecorator.js b/node_modules/@credo-ts/core/build/decorators/thread/ThreadDecorator.js
index 4c8280e..86bec47 100644
--- a/node_modules/@credo-ts/core/build/decorators/thread/ThreadDecorator.js
+++ b/node_modules/@credo-ts/core/build/decorators/thread/ThreadDecorator.js
@@ -12,7 +12,9 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.ThreadDecorator = void 0;
 const class_transformer_1 = require("class-transformer");
 const class_validator_1 = require("class-validator");
-const BaseMessage_1 = require("../../agent/BaseMessage");
+const PthidRegExp =
+  /^([-_./A-Za-z0-9]{8,64}|did:[a-z0-9]+:(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9.-])+(?::(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)*(?:\?(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)?(?:#(?:%[0-9A-Fa-f]{2}|[A-Za-z0-9._~!$&'()*+,;=:@/?-])*)?)$/
+
 /**
  * Represents `~thread` decorator
  * @see https://github.com/hyperledger/aries-rfcs/blob/master/concepts/0008-message-id-and-threading/README.md
@@ -28,13 +30,13 @@ class ThreadDecorator {
 exports.ThreadDecorator = ThreadDecorator;
 __decorate([
     (0, class_transformer_1.Expose)({ name: 'thid' }),
-    (0, class_validator_1.Matches)(BaseMessage_1.MessageIdRegExp),
+    (0, class_validator_1.Matches)(PthidRegExp),
     (0, class_validator_1.IsOptional)(),
     __metadata("design:type", String)
 ], ThreadDecorator.prototype, "threadId", void 0);
 __decorate([
     (0, class_transformer_1.Expose)({ name: 'pthid' }),
-    (0, class_validator_1.Matches)(BaseMessage_1.MessageIdRegExp),
+    (0, class_validator_1.Matches)(PthidRegExp),
     (0, class_validator_1.IsOptional)(),
     __metadata("design:type", String)
 ], ThreadDecorator.prototype, "parentThreadId", void 0);
